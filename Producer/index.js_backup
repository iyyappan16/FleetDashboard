var request = require('request');

const {
  EventHubClient
} = require('@azure/event-hubs');

const EVENTHUB_CONNECTION_STRING = "Endpoint=sb://hlseventhub-tvk6dvklpv4ne.servicebus.windows.net/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=PLomU5AkcVS6XMCi3AUAQqAwSsXAX1KbY6sdSoiuUZ4=";
const EVENTHUB_NAME = "here_api_eventhub";
const client = EventHubClient.createFromConnectionString(EVENTHUB_CONNECTION_STRING, EVENTHUB_NAME);

//default set to 5 vehicle 
var vehicleCount  = 5 ; 
if ( process.argv.length > 2) {
    vehicleCount = process.argv[2];
    console.log(vehicleCount);
}

var vehicleMap = [];
vehicleMap[0] = {
  "startLat": 41.834746,
  "startLon": -87.759434,
  "currentLat": 41.834746,
  "currentLon": -87.759434,
  "marker": "circle1",
  "color": "red",
  "number": "1",
  "legend": "Truck1"
};
vehicleMap[1] = {
  "startLat": 41.835613,
  "startLon": -87.7600445,
  "currentLat": 41.835613,
  "currentLon": -87.7600445,
  "marker": "square1",
  "color": "green",
  "number": "2",
  "legend": "Truck2"
};
vehicleMap[2] = {
  "startLat": 41.8375025,
  "startLon": -87.7627006,
  "currentLat": 41.8375025,
  "currentLon": -87.7627006,
  "marker": "diamond1",
  "color": "yellow",
  "number": "3",
  "legend": "Truck3"
};
vehicleMap[3] = {
  "startLat": 41.8338129,
  "startLon": -87.7587817,
  "currentLat": 41.8338129,
  "currentLon": -87.7587817,
  "marker": "cross1",
  "color": "blue",
  "number": "4",
  "legend": "Truck4"
};
vehicleMap[4] = {
  "startLat": 41.8346527,
  "startLon": -87.7556561,
  "currentLat": 41.8346527,
  "currentLon": -87.7556561,
  "marker": "triangle1",
  "color": "brown",
  "number": "5",
  "legend": "Truck5"
};
vehicleMap[5] = {
  "startLat": 41.83655,
  "startLon": -87.754649,
  "currentLat": 41.83655,
  "currentLon": -87.754649,
  "marker": "circle1",
  "color": "blue",
  "number": "6",
  "legend": "Truck6"
};
vehicleMap[6] = {
  "startLat": 41.8358081,
  "startLon": -87.7510883,
  "currentLat": 41.8358081,
  "currentLon": -87.7510883,
  "marker": "square1",
  "color": "blue",
  "number": "7",
  "legend": "Truck7"
};
vehicleMap[7] = {
  "startLat": 41.8473103,
  "startLon": -87.7544601,
  "currentLat": 41.8473103,
  "currentLon": -87.7544601,
  "marker": "dot1",
  "color": "green",
  "number": "8",
  "legend": "Truck8"
};
vehicleMap[8] = {
  "startLat": 41.8451062,
  "startLon": -87.763967,
  "currentLat": 41.8451062,
  "currentLon": -87.763967,
  "marker": "triangle2",
  "color": "yellow",
  "number": "9",
  "legend": "Truck9"
};
vehicleMap[9] = {
  "startLat": 41.8445133,
  "startLon": -87.7733764,
  "currentLat": 41.8445133,
  "currentLon": -87.7733764,
  "marker": "plus2",
  "color": "white",
  "number": "10",
  "legend": "Truck10"
};


async function getNearsetRoadLatLon(lat, lon) {
  return new Promise(resolve => {
    var payload1 = '<gpx xmlns="http://www.topografix.com/GPX/1/1" creator="MapSource 6.16.3" version="1.1"     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.topografix.com/GPX/1/1 http://www.topografix.com/GPX/1/1/gpx.xsd"><trk><trkseg><trkpt';
    var payload2 = '></trkpt></trkseg></trk></gpx>';


    var finalPayLoad = payload1 + " lat=\"" + lat + "\"" + " lon=\"" + lon + "\"" + payload2;
    request.post({
        url: 'https://rme.api.here.com/2/matchroute.json?routemode=car&app_id=EbuEzCM30PVYLtSsdtOK&app_code=atl-trn6cHEDADsbaK2bLQ',
        body: finalPayLoad,
        headers: {
          'Content-Type': 'text/xml'
        }
      },
      function (error, response, body) {
        var parsedBody = JSON.parse(body);
        var jsonObject = {};
        jsonObject.lat = parsedBody.TracePoints[0].lat;
        jsonObject.lon = parsedBody.TracePoints[0].lon;

        jsonObject.latMatched = parsedBody.TracePoints[0].latMatched;
        jsonObject.lonMatched = parsedBody.TracePoints[0].lonMatched;

        latIncrease = chooseRandomNumber(1, 2) / 10000;
        lonIncrease = chooseRandomNumber(1, 2) / 10000;

        jsonObject.nextLat = jsonObject.latMatched + latIncrease;
        jsonObject.nextLon = jsonObject.lonMatched + lonIncrease;

        jsonObject.engineTemperature = chooseRandomNumber(55, 100);
        jsonObject.engineRPM = chooseRandomNumber(2000, 8000);
        jsonObject.engineLoad = chooseRandomNumber(5, 100);
        jsonObject.coolantTemperature = chooseRandomNumber(50, 200);
        resolve(jsonObject);

      });
  });
}

function chooseRandomNumber(min, max) {
  return Math.floor(Math.random() * (max - min + 1) + min);
}

async function main() {
  for (;;) {
    //for (var key in vehicleMap) {
      for (var key = 0 ; key < vehicleCount ; key ++ ) {

      var jsonresp = await getNearsetRoadLatLon(vehicleMap[key].currentLat, vehicleMap[key].currentLon);
      console.log(jsonresp.latMatched + " " + jsonresp.lonMatched + " " + vehicleMap[key].marker + " " + vehicleMap[key].color + " " + vehicleMap[key].number + " " + vehicleMap[key].legend);
      vehicleMap[key].currentLat = jsonresp.nextLat;
      vehicleMap[key].currentLon = jsonresp.nextLon;

      //prepare ehub-msg;
      var url = "/6.2/reversegeocode.json?prox=" + vehicleMap[key].currentLat + "%2C" + vehicleMap[key].currentLon + "%2C250&mode=retrieveAddresses&maxresults=1&gen=9"
      var ehMsg = {};
      ehMsg.uid = "uid_geocode_v_" + key + "_" + (Math.round(new Date() / 1000)).toString();
      ehMsg.api = "geocoder";
      ehMsg.url = url;
      ehMsg.method = "get";
      ehMsg.vehicleId = vehicleMap[key].legend;
      ehMsg.latMatched = jsonresp.latMatched;
      ehMsg.lonMatched = jsonresp.lonMatched;
      ehMsg.engineTemperature = jsonresp.engineTemperature;
      ehMsg.engineRPM = jsonresp.engineRPM;
      ehMsg.engineLoad = jsonresp.engineLoad;
      ehMsg.coolantTemperature = jsonresp.coolantTemperature;

      const data = {
        body: ehMsg
      };
      //console.log(JSON.stringify(data,null,4));

      //send to event-hub .
      client.send(data);
    }
  }
}
main();
